#!/usr/bin/env python3

'''owl: ombakwarna macro language (pre-alpha version)

owl is a very simple interactive language intended to
be implemented as macro language in ombakwarna software.

ombakwarna websites:
1) Executibles: https://sourceforge.net/projects/ombakwarna/
2) Codes: https://github.com/megatharun/ombakwarna

Author: Megat Harun Al Rashid bin Megat Ahmad

Copyright (C) 2020  Agensi Nuklear Malaysia

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.'''

#-----------------------------------------START--------------------------------------------

import os
from termcolor import colored
import numpy as np

print ('{owl: ombakwarna macro language (pre-alpha version)')
print ('interactive interpreter, License: GPL version 2')
print ('Copyright (c) 2020 Agensi Nuklear Malaysia, Bangi}\n')

dataH = []
dataS = dict()

RSV = [                     # RSV = Reserved string value
        (':=','=','?01?'),
        ('^','**','?02?'),
        ('=','==','?03?'),
        ('[','np.array([','?04?'),
        (']','])','?05?'),        
        ('sum','np.sum','?06?'),
        ('log','np.log','?07?'),
        ('sin','np.sin','?08?'),
        ('cos','np.cos','?09?'),
        ('tan','np.tan','?10?'),
        ('pi','np.pi','?11?'),
        ('exp','np.exp','?12?'),
        ('mean','np.mean','?13?'),
        ('median','np.median','?14?'),
        ('std','np.std','?15?'),
        ('var','np.var','?16?')
        ]

class Macro:

    def __init__(self,lineStr):

        self.lineStr = lineStr

    def evaluate(self):

        self.lineStrLen = self.lineStr.replace(' ','').split(':=')

        if len(self.lineStrLen)==2:
            self.lineStr = self.lineStrLen[1] # Right asssignment for eval() later
        else:
            pass
            
        for i1,j1 in enumerate(RSV): # enumerating RSV
            self.lineStr = self.lineStr.replace(j1[0],j1[2])

        for i2,j2 in enumerate([*dataS]): # embedding reference to data structure
            self.lineStr = self.lineStr.replace(j2,"dataS['"+(j2)+"']")
            
        for i3,j3 in enumerate(RSV): # enumerating RSV again
            self.lineStr = self.lineStr.replace(j3[2],j3[1])

        if len(self.lineStrLen)==2:
            # passing evaluated expression to data structure dictionary
            dataS[self.lineStrLen[0]] = eval(compile(self.lineStr, '<string>', 'eval'))
        else:
            # printing output
            print (colored('[out]:\n','red','on_cyan', attrs=['bold']),
                (eval(compile(self.lineStr, '<string>', 'eval'))))

while(True):

    a = input(colored('[in]: ','yellow','on_cyan', attrs=['bold']))

    if a=='q()': # To exit
        break
    elif a=='quit()': # To exit
        break
    elif a=='': # Empty input
        pass
    elif a==b'\x0c'.decode(): # To clear the screen
        os.system('clear') # for Linux
        # os.system('cls') # for Windows
        pass
    else:    
        b = Macro(a.replace('[in]: ',''))
        b.evaluate()
#------------------------------------------END---------------------------------------------
